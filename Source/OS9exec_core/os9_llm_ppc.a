            MACHINE     MC68040

;=====================================================================
;   (c) 1993-1996 by ZEP electronics Lukas Zeller, CH-ZŸrich
;
;   History : 93-06-06  : created
;             93-08-09  : several attempts to make the thing 040
;                         compatible
;             94-10-11  : added FPU context save and removed changing
;                         critical vectors such as BusError trying to
;                         solve RamDoubler / PPC incompatibility (w/o
;                         success so far).
;             94-10-23  : added Getstalt check for VM testing, added
;                         possibility to enter system state if not
;                         already there.
;             96-10-10  : Renamed to os9_llm (OS9 low level magic),
;                         tried to make work with MWC.
;             96-10-15  : added PPC_DISPATCH as common entry
;                         to allow packing os9_llm to a 68k CODE
;                         resource
;             96-10-17  : made all os9regs fields longword aligned
;                         (required for PPC, was before oddword aligned
;                         after RP$SR --> crash)
;             96-10-23  : Implemented non IRQ-blocked OS9 code
;                         execution by manipulating ApplLimit if
;                         RP$FLAGS FLAGS$IRQ is set.
;             96-11-11  : Added correct handling for uninitialized
;                         TRAP handlers and fixed basic bug in
;                         stack frame presented to TRAP handlers:
;                         According to OS9 docs, offset 6 contains
;                         Vector NUMBER, but in fact it is the
;                         Vector OFFSET!
;             96-12-13  : Converted to OS9-in-user-mode. Works
;                         fine for PPC, but crashes in 68k because
;                         there's no memory mapped in userstate in
;                         a real 68k while there is for the LC040
;                         emulator in PPC.
;             97-01-22  : Separated PPC-ok source into os9_llm_ppc.a
;                         to allow separate development for 68k
;                         and PPC until Userstate/MMU issue is fixed
;             98-10-26  : Added hard-coded definitions for ApplLimit and
;                         StkLowPt, as they are not any longer defined
;                         as low-memory globals in the Apple Headers.
;                         (get-Macros should be used, I know...)
;             99-01-14  : Added code to support Mac-Context running
;                         in user mode. Fixed bad error where User
;                         trap handler did not correctly set D0 and D1
;                         (used absolute RP$Dx access instead of RP$Dx(A6))
;             00-07-22  : Uninitialized trap: Switch to mac mode 
;                         with "SwitchMacModeSensitive" (bfo)
;=====================================================================

; %%% 99-01-14: The following "bug fixes" have been made, but not yet
;               fully verified if they are a real fix or a new bug:
;               - absolute RP$Dx instead of RP$Dx(A6) in User Trap
;                 handler fixed (THAT was for sure an error, but
;                 as only D1 was affected, this might not have
;                 done any harm. (see %%1%%)
;               - When calling an uninitialized trap, the TRAP
;                 stack frame seemed to be left on the ISP, while the
;                 exception entry of the main module was entered
;                 in user mode (see %%2%%). This did (and does) no
;                 harm because the mac stack-pointer was reloaded
;                 in SwitchMac anyway and corrected the mistake.
; %%% 99-08-05: Another bug found, which apparently did not cause problems
;               so far:
;               - When calling an uninitialized trap, OS9_GO left
;                 a zero longword (which, in case of an initialized
;                 trap, would have been removed trough RTS-entry of
;                 of the trap handler routine) on the OS9 user stack.
;                 This obviously would have caused severe problems
;                 if the routine doing the TCALL had anything left
;                 on the stack. Probably this happened only in cstart,
;                 which never exits by RTS and thus we had luck?!
;                 (see %%3%%). Also, the trap entry address (intended
;                 to be called trough RTS) was left on ISP. Again, (see %%2%%)
;                 no problem here because the mac stack-pointer was reloaded
;                 at SwitchMac and corrected this.
;               - For Error trap handlers, on the user stack frame (passed
;                 to error trap routine) the value of A7 was set to the stacked
;                 SR instead of representing A7 BEFORE the exception. (see %%4%%)
;                 This problem was only present in PPC version (68k was ok).

;=====================================================================
;   Initial Assembler Directives
;=====================================================================

                
                STRING  C

                PRINT   OFF
SystemSevenOrLater SET 1
                INCLUDE 'ConditionalMacros.a'
                INCLUDE 'Traps.a'
                INCLUDE 'Memory.a'
                INCLUDE 'LowMemEqu.a'
                INCLUDE 'Gestalt.a'
                INCLUDE 'OSUtils.a'
                PRINT   ON

;=====================================================================
;   Equates
;=====================================================================

Trap0Vec        EQU     $00000080
Trap1Vec        EQU     $00000084
Trap2Vec        EQU     $00000088
Trap3Vec        EQU     $0000008C
Trap4Vec        EQU     $00000090
Trap5Vec        EQU     $00000094
Trap6Vec        EQU     $00000098
Trap7Vec        EQU     $0000009C
Trap8Vec        EQU     $000000A0
Trap9Vec        EQU     $000000A4
Trap10Vec       EQU     $000000A8
Trap11Vec       EQU     $000000AC
Trap12Vec       EQU     $000000B0
Trap13Vec       EQU     $000000B4
Trap14Vec       EQU     $000000B8
Trap15Vec       EQU     $000000BC
BusErrVec       EQU     $00000008
AdrErrVec       EQU     $0000000C
IllegalVec      EQU     $00000010
ZeroDivVec      EQU     $00000014
ChkVec          EQU     $00000018
TrapVVec        EQU     $0000001C
PrivVec         EQU     $00000020

; still available, but not any longer defined as LM-Globals
StkLowPt        EQU     $00000110
ApplLimit       EQU     $00000130

; an undefined, but existing global scratch area of 12 bytes
ApplScratch     EQU     $00000A78

; os9regs record offsets
RP$D0           EQU     0
RP$D1           EQU     4
RP$D2           EQU     8
RP$D3           EQU     12
RP$D4           EQU     16
RP$D5           EQU     20
RP$D6           EQU     24
RP$D7           EQU     28
RP$A0           EQU     32
RP$A1           EQU     36
RP$A2           EQU     40
RP$A3           EQU     44
RP$A4           EQU     48
RP$A5           EQU     52
RP$A6           EQU     56
RP$A7           EQU     60
RP$SR           EQU     64
RP$FLAGS        EQU     66
RP$FLAGSL       EQU     67
RP$PC           EQU     68
RP$FP0          EQU     72
RP$FP1          EQU     84
RP$FP2          EQU     96
RP$FP3          EQU     108
RP$FP4          EQU     120
RP$FP5          EQU     132
RP$FP6          EQU     144
RP$FP7          EQU     156
RP$FPCR         EQU     168
RP$FPSR         EQU     172
RP$FPIAR        EQU     176
RP$TRAPTABLE    EQU     180     ; pointer to Traphandler dispatch table
RP$MEMBASE      EQU     184     ; static storage memory base (unbiased!)

TRAPENTRYSIZE   EQU     20      ; size of Traphandler dispatch table entry
FIRSTTRAP       EQU     33      ; trap number of TRAP #1

; bits in RP$FLAGS
FLAGBIT$FPU     EQU     0       ; Bit0: set if FPU is present
FLAGBIT$IRQ     EQU     1       ; Bit1: set if process may run with IRQs enabled
FLAGBIT$UM      EQU     2       ; Bit2: set if Mac context runs in user mode

; entry
; =====

OS9_LLM_ENTRY   MAIN    EXPORT

                EXPORT  PPC_DISPATCH
                EXPORT  OS9_DEBUG
                EXPORT  OS9_GO
                EXPORT  OS9_CACHE_RF
                EXPORT  OS9_UMPROBE

                BRA     PPC_DISPATCH


;=====================================================================
;   int OS9_UMPROBE(void); 
;
;   Input :     (A7).L    = return address
;               (4,A7).L  = dummy (reserved for selector)
;               
;   Output :    1 if 68k mac context runs in user mode,
;               0 otherwise
;
;=====================================================================

OS9_UMPROBE
; try to find out if this is the user mode
                MOVE    SR,D0
                ANDI.W  #$2000,D0           ; test for S bit
                BEQ.S   OUP1                ; --> User mode
                CLR.L   D0                  ; not user mode, return 0
                RTS
OUP1            MOVEQ   #1,D0               ; user mode, return 1
                RTS




;=====================================================================
;   void OS9_CACHE_RF(ulong, void *addr, ulong size); 
;
;   Input :     (A7).L    = return address
;               (4,A7).L  = dummy (reserved for selector)
;               (8,A7).L  = pointer to area to be CodeCacheFlushed 
;               (12,A7).L  = size of area
;               
;   Output :    none
;
;   Note :      Must not be called when TrapAvail(_HWPriv) is not
;               true (test this before!)
;=====================================================================

OS9_CACHE_RF
; first, save the used regs
                MOVEM.L A0/A1,-(A7)         ; [8] save regs
; get arguments for FlushCodeCacheRange
                MOVEA.L 8+8(A7),A0          ; pointer
                MOVEA.L 8+12(A7),A1         ; size
; do the flush
                _FlushCodeCacheRange
; %%% seems to work without data cache flush
;               _FlushDataCache
; done
                MOVEM.L (A7)+,A0/A1         ; restore registers
                RTS




;=====================================================================
;   void OS9_DEBUG(ulong, regs_type *rp,ConstStr255Param debuggerMsg); 
;
;   Input :     (A7).L    = return address
;               (4,A7).L  = dummy (reserved for selector)
;               (8,A7).L  = pointer to OS-9 register image record 
;               (12,A7).L  = message to show (Pascal string Ptr)
;               
;   Output :    none
;
;   Note :      Used only to enter MacsBug with D0-D7,A0-A6 (but
;               NOT A7) in OS-9 context. Useful to "have a look".
;=====================================================================

OS9_DEBUG
; first, save the entire Mac context
                MOVEM.L D1-D7/A0-A6,-(A7)   ; [56] save all mac registers
; prepare param for DebugStr below (push them onto stack)
                MOVEA.L 56+12(A7),A0        ; debugstring ptr
                MOVE.L A0,-(A7)             ; [+4=60] push, _DebugStr will pop it later
; get OS-9 regs to have a look at them
                MOVE.L  60+8(A7),A6         ; get pointer to register image record
                MOVEM.L RP$D0(A6),D0-D7/A0-A5  ; get all other registers
                MOVEA.L RP$A6(A6),A6        ; get A6, too
                _DebugStr
; restore all of the Mac context
                MOVEM.L (A7)+,D1-D7/A0-A6   ; [56] restore all mac registers
                RTS
                

;=====================================================================
;   ulong OS9_GO(ulong, regs_type *rp); 
;
;   Input :     (A7).L    = return address
;               (4,A7).L  = dummy (reserved for selector)
;               (8,A7).L  = pointer to OS-9 register image record 
;               
;   Output :    D0.L = OS-9 system call number (D0.high = 0000)
;                      or TRAP function code   (D0.high = vector NUMBER)
;                      or error trap (D0.high=$FAFA, D0.W = vector OFFSET)
;
;=====================================================================

OS9_GO
;               _Debugger                   ; %%% enable to debug OS9_GO.
; first, save the entire Mac context
                MOVEM.L D1-D7/A0-A6,-(A7)   ; [56] save all mac registers
; get pointer to OS-9 register context
                MOVE.L  56+8(A7),A6         ; get pointer to register image record
                MOVE.W  SR,D0               ; get current IRQ mask
                MOVE.W  D0,-(A7)
                MOVE.W  D0,-(A7)            ; save SR, twice to keep stack long word aligned
; mask IRQs on entry into critical phase (vectors get patched now)
                ORI.W   #$0700,SR           ; mask all interrupts now (they get re-enabled either before or after call into OS9 code)
                MOVE.L  ApplScratch+8,-(A7) ; save what is in ApplScratch, too
; save vectors [0]
                MOVE.L  Trap0Vec,-(A7)      ; save current TRAPx vectors
                MOVE.L  Trap1Vec,-(A7)
                MOVE.L  Trap2Vec,-(A7)
                MOVE.L  Trap3Vec,-(A7)
                MOVE.L  Trap4Vec,-(A7)
                MOVE.L  Trap5Vec,-(A7)
                MOVE.L  Trap6Vec,-(A7)
                MOVE.L  Trap7Vec,-(A7)
                MOVE.L  Trap8Vec,-(A7)
                MOVE.L  Trap9Vec,-(A7)
                MOVE.L  Trap10Vec,-(A7)
                MOVE.L  Trap11Vec,-(A7)
                MOVE.L  Trap12Vec,-(A7)
                MOVE.L  Trap13Vec,-(A7)
                MOVE.L  Trap14Vec,-(A7)
                MOVE.L  Trap15Vec,-(A7)
; Bus,Address and Illegal stay untouched!
                MOVE.L  ZeroDivVec,-(A7)
                MOVE.L  ChkVec,-(A7)
                MOVE.L  TrapVVec,-(A7)
                MOVE.L  PrivVec,-(A7)
; save globals that might be modified
                MOVE.L  ApplLimit,-(A7)     ; Save Tool's original ApplLimit [Mac context offset=4]
                MOVE.L  StkLowPt,-(A7)      ; save original Stack Low limit (as StackSniffer can be disabled by setting it to 0
; save the OS9 register context pointers again here
                MOVE.L  A6,-(A7)            ; os9regs record ptr [Mac context offset=0]
                MOVE.L  A7,ApplScratch+8    ; save globally reachable pointer to the Mac context

; install trap handler for OS-9 execution
                LEA     Trap0Handler(PC),A0 ; get pointer to TRAP0 handler for OS-9 purposes
                MOVE.L  A0,Trap0Vec         ; install handler
; install trap handler for all other TRAPs
                LEA     TrapHandler(PC),A0
                MOVE.L  A0,Trap1Vec
                MOVE.L  A0,Trap2Vec
                MOVE.L  A0,Trap3Vec
                MOVE.L  A0,Trap4Vec
                MOVE.L  A0,Trap5Vec
                MOVE.L  A0,Trap6Vec
                MOVE.L  A0,Trap7Vec
                MOVE.L  A0,Trap8Vec
                MOVE.L  A0,Trap9Vec
                MOVE.L  A0,Trap10Vec
                MOVE.L  A0,Trap11Vec
                MOVE.L  A0,Trap12Vec
                MOVE.L  A0,Trap13Vec
                MOVE.L  A0,Trap14Vec
                MOVE.L  A0,Trap15Vec
; install trap handler for error traps
                LEA     ErrTrapHandler(PC),A0
; Don't touch Bus,Address and Illegal
                MOVE.L  A0,ZeroDivVec
                MOVE.L  A0,ChkVec
                MOVE.L  A0,TrapVVec
                MOVE.L  A0,PrivVec

; (A6) is the pointer to the os9regs record
; get FPU context (if FPU available)
                BTST    #FLAGBIT$FPU,RP$FLAGSL(A6) ; do we need to transfer FPU context, too?
                BEQ.S   OGO1                ; ..no
                FMOVEM  RP$FP0(A6),FP0-FP7  ; get FPU data registers
                FMOVEM  RP$FPCR(A6),FPCR/FPSR/FPIAR ; get FPU control registers
; make process IRQ proof (if selected)
OGO1            BTST    #FLAGBIT$IRQ,RP$FLAGSL(A6)  ; do we allow IRQs during this process?
                BEQ.S   OGO3                        ; ..no --> keep them disabled
                MOVE.L  RP$MEMBASE(A6),ApplLimit    ; set ApplLimit such that OS9's A7 won't cause StackSniffer to throw Error #28
                CLR.L   StkLowPt                    ; it seems that StackSniffer can be disabled this way
                MOVE    D0,SR                       ; re-enable IRQs now (and execute OS9 with IRQs enabled)
OGO3
; prepare OS9 context now
                MOVE.L  RP$A7(A6),A0
; get processor registers
                MOVE.L  RP$PC(A6),-(A0)     ; set up return address
                MOVE.L  RP$A6(A6),-(A0)     ; and append A6
; now set up stack pointer (depends on wether we are already in user mode or not)
                BTST    #FLAGBIT$UM,RP$FLAGSL(A6)   ; mac context already runs in user mode?
                BNE.S   OGO4                ; ..yes --> simply modify stack pointer 
; mac context runs in system mode: USP must be set up
                MOVE.L  A0,USP              
                MOVEM.L RP$D0(A6),D0-D7/A0-A5  ; get all other registers

                ANDI    #$DFFF,SR           ; %%% switch to user mode !!!!!!
                BRA.S   OGO7                ; --> now GO
; mac context runs in user mode: A7 is already the USP, so just change it
OGO4            MOVE.L  A0,A7
                MOVEM.L RP$D0(A6),D0-D7/A0-A5  ; get all other registers

; here we are in User mode and A7=USP, with A6 and PC of OS9 context on top
OGO7            MOVE.W  RP$SR(A6),CCR       ; get the condition codes

                MOVEA.L (A7)+,A6            ; now get the OS-9 A6
                RTS                         ; ...and jump into OS-9 context
; now the program runs in OS-9 context and will not return until a TRAP occurs


; error trap handler
ErrTrapHandler
; save the OS-9 context
                MOVEM.L A5/A6,-(A7)
                MOVEA.L ApplScratch+8,A5    ; get pointer to Mac context (=ISP stack pointer)
                MOVEA.L (A5),A6             ; get pointer to register image record
                MOVE.W  8(A7),RP$SR(A6)     ; save OS-9 user program's SR
                MOVE.L  (A7)+,RP$A5(A6)     ; save OS-9 A5
                MOVE.L  (A7)+,RP$A6(A6)     ; save OS-9 A6
                MOVEM.L D0-D7/A0-A4,RP$D0(A6) ; save all the other registers
                
; prepare stack for calling user's TRAP handler
                MOVE.W  6(A7),D1            ; get stack frame format type and vector offset
                MOVE.L  #$FAFA0000,D0       ; fault sync word
                MOVE.W  D1,D0               ; vector offset (NOT number!!) in lower word
                ANDI.W  #$0FFF,D0           ; mask out stack frame type
                MOVE.L  2(A7),A0            ; get OS-9 program's PC (= where exception occurred)
; ensure that after RTE, processor runs in correct mode for transition to mac context
                BTST    #FLAGBIT$UM,RP$FLAGSL(A6)   ; mac context in user mode?
                BNE.S   OGO8                ; ..yes --> ensure that after RTE we are still in user mode 

; mac runs in supervisor mode, make sure that this remains the case even after RTE 
                LEA     NoStackFrameSuper(PC),A1    ; get new address to continue (supervisor mac context case)
                MOVE.L  A1,2(A7)            ; replace the address in the stack frame
                ORI     #$2000,(A7)         ; force supervisor mode in stacked SR
                RTE                         ; remove stack frame (whatever type)
; mac runs in user mode, make sure that user mode is active after RTE 
OGO8            LEA     NoStackFrameUser(PC),A1 ; get new address to continue (user mac context case)
                MOVE.L  A1,2(A7)            ; replace the address in the stack frame
                ANDI    #$DFFF,(A7)         ; force user mode in stacked SR
                RTE                         ; remove stack frame (whatever type)
; stack frame is removed
NoStackFrameSuper
                MOVE.L  USP,A2              ; get OS-9 context stack pointer (user!); we are in Supervisor mode and must use USP                
                BRA.S   OGO9

NoStackFrameUser
                MOVE.L  A7,A2               ; get OS-9 context stack pointer (user!); we are in User mode and may use A7

; now build register stack for user trap handler
OGO9            MOVE.L  A2,A1               ; %%4%% save stack pointer of where exception occurred
                MOVE.L  A0,-(A2)            ; save exception PC
                MOVE.W  RP$SR(A6),-(A2)     ; copy SR
                MOVE.L  A1,-(A2)            ; %%4%% save the OS9 program stack pointer (USP or ISP, depending on mac context mode)
                MOVE.L  RP$A6(A6),-(A2)     ; save A6
                MOVE.L  RP$A5(A6),-(A2)     ; save A5
                MOVEM.L A3/A4,-(A2)         ; save A4,A3
                MOVE.L  RP$A2(A6),-(A2)     ; save A2
                MOVE.L  RP$A1(A6),-(A2)     ; save A1
                MOVE.L  RP$A0(A6),-(A2)     ; save A0
                MOVEM.L D2-D7,-(A2)         ; save D7..D2
                MOVE.L  RP$D1(A6),-(A2)     ; save D1 %%1%%
                MOVE.L  RP$D0(A6),-(A2)     ; save D0 %%1%%
; now modify the OS9 register image to make it ready for error trap handler entry
                MOVE.L  A2,RP$A7(A6)        ; current OS-9 stack
                MOVE.L  A2,RP$A5(A6)        ; pointer to this stack frame
                MOVE.L  RP$A7(A2),RP$A1(A6)     ; stack pointer when exception occurred
                MOVE.L  A0,RP$A0(A6)        ; PC where exception occurred
                MOVE.W  D0,RP$D7(A6)        ; vector offset(!) into D7.W
; the calling C program must set RP$A6 and RP$PC to the appropriate handler routine/data area
; it may also modify RP$A7 if the F$STrap has specified another than the current stack.
; But now: go switch to Mac Context
                BRA     SwitchMacModeSensitive


; other TRAP handler.
; Here we are for sure in Supervisor mode, even if mac context runs in user mode
TrapHandler 
; NEW method: don't call C-level for traphandler calls any more!
                MOVEM.L D0/D1/A0/A1/A5/A6,-(A7)         ; save important registers [24]
                MOVEA.L ApplScratch+8,A5    ; get pointer to Mac context (=stack pointer)
                MOVEA.L (A5),A6             ; get pointer to register image record
                MOVEA.L RP$TRAPTABLE(A6),A5 ; get pointer to trap table

; prepare stack for calling a TRAP handler routine
                MOVE.W  24(A7),RP$SR(A6)    ; make a copy of the SR in case we need it in NoTrapHandler
                MOVE.L  24+2(A7),A0         ; get OS-9 program's PC (= address of TCALL code)
                MOVE.W  24+6(A7),D1         ; get stack frame format type and vector offset
                ANDI.W  #$0FFF,D1           ; isolate vector offset

                MOVE    USP,A1              ; get OS-9's stack pointer
; now build stack frame for (user) trap handler entry
                MOVE.W  (A0)+,D0            ; get the OS-9 TCALL code
                MOVE.L  A0,-(A1)            ; save return PC 
                MOVE.W  D1,-(A1)            ; save vector OFFSET (not NUMBER) for trap handler
                MOVE.W  D0,-(A1)            ; save function code
; now calc return value for os9_go
                LSR.W   #2,D1               ; calculate vector NUMBER from vector offset
                SWAP D0
                MOVE.W  D1,D0
                SWAP D0                     ; swap it into upper word of D0
                ; now D0.L = return value for os9_go() = $vvvvtttt (vvvv=vector #, tttt=trap call #)
                
; get TRAP handler entry, d1.W = trapnumber
                SUBI.W  #FIRSTTRAP,D1       ; calc entry number in trap dispatch table
                MULU.W  #TRAPENTRYSIZE,D1   ; calc offset
                LEA     (A5,D1),A0          ; pointer to entry
                MOVE.L  20(A7),-(A1)        ; save caller's A6
                MOVE.L  (A0),-(A1)          ; set entry address (will be used by RTS below)
                BEQ.S   NoTrapHandler       ; ### ERROR, no traphandler!
                MOVE.L  4(A0),D1            ; get traphandler static storage basepointer
                ADDI.L  #$8000,D1           ; calculate A6
                MOVE.L  D1,20(A7)           ; set Traphandler's A6 (on stack)
; now everything's ready for launching traphandler
                MOVE    A1,USP              ; update USP
                MOVEM.L (A7)+,D0/D1/A0/A1/A5/A6 ; restore registers [-24]
                ADDQ.L  #8,A7               ; discard TRAP exception (four word) stack frame
                ANDI    #$DFFF,SR           ; %%% switch to user mode for execution of trap code !!!!!!
                RTS                         ; go execute trap routine


; error case: no traphandler installed for this vector
; D0.L = info for high-level (return value for OS9exec)
; on SUPERVISOR stack: D0/D1/A0/A5/A6 of OS9 program
; A6=os9reg pointer
NoTrapHandler
                MOVE.L (A7)+,RP$D0(A6)
                MOVE.L (A7)+,RP$D1(A6)
                MOVE.L (A7)+,RP$A0(A6)
                MOVE.L (A7)+,RP$A1(A6)
                MOVE.L (A7)+,RP$A5(A6)
                MOVE.L (A7)+,RP$A6(A6)
                ADDQ.L #4,A7                ; %%3%% remove trap routine entry address (set above for call trough RTS)
; copy other regs
                MOVEM.L D2-D7,RP$D2(A6)
                MOVEM.L A2-A4,RP$A2(A6)
; remove TRAP exception frame from the ISP, %%2%%
                ADDQ.L  #8,A7               ; discard TRAP exception (four word) stack frame
                ADDQ.L  #4,A1               ; %%3%% remove entry address=0, it will be replaced later
;               MOVE    A1,USP              ; not really needed, because it will be done in context (bfo)

                MOVEA.L ApplScratch+8,A5    ; get pointer to Mac context (=stack pointer)
                MOVE.L  A1,RP$A7(A6)        ; save the OS-9 stack pointer (ready for entry of a TRAP handler)
; go switch to Mac Context
                BRA.S   SwitchMacModeSensitive ; make it sensitive to Mac mode (bfo)
                
                               
                                

; OS-9 TRAP 0 handler. 
; Here we are for sure in Supervisor mode, even if mac context runs in user mode
Trap0Handler
; save the OS-9 context
                MOVEM.L A5/A6,-(A7)         ; save pointers [8]
                MOVEA.L ApplScratch+8,A5    ; get pointer to Mac context (=stack pointer)
                MOVEA.L (A5),A6             ; get pointer to register image record
                MOVE.W  8(A7),RP$SR(A6)     ; save OS-9 user program's SR
                MOVE.L  (A7)+,RP$A5(A6)     ; save OS-9 A5
                MOVE.L  (A7)+,RP$A6(A6)     ; save OS-9 A6
                MOVEM.L D0-D7/A0-A4,RP$D0(A6) ; save all the other registers
                
                MOVE    USP,A0
                MOVE.L  A0,RP$A7(A6)        ; save the OS-9 stack pointer (before execution of TRAP-Instruction)
                
                MOVE.L  2(A7),A0            ; get OS9 PC (right after TRAP instruction, pointing to trap word)
                CLR.L   D0
                MOVE.W  (A0)+,D0            ; get the OS-9 call word
                MOVE.L  A0,RP$PC(A6)        ; update OS9 PC past call word

                ADDQ.L  #8,A7               ; discard TRAP exception (four word) stack frame

                
; first switch back to user mode if mac runs in user mode.
SwitchMacModeSensitive
                BTST    #FLAGBIT$UM,RP$FLAGSL(A6)   ; mac context in user mode?
                BEQ.S   SwitchMac           ; ..no --> just continue processing on ISP 
; we need to run mac in user mode, so switch back NOW already
                ANDI    #$DFFF,SR           ; switch to user mode for return to Mac context

                
; get back the Mac context: D0.L = result code handed back to Mac caller
; ======================================================================
SwitchMac       MOVE.L  A5,A7               ; this is the MAC stack pointer
                ; Note: A5 and A7=ISP should be equal, if mac runs in Supervisor mode
                ;       otherwise, A7=USP will be the OS-9 stack pointer, while A5 is the Mac context

                MOVE.L  (A7)+,A6            ; get the OS9 register context pointer from stack
; restore modified globals
                MOVE.L  (A7)+,StkLowPt      ; re-enable StackSniffer
                MOVE.L  (A7)+,ApplLimit     ; now, we can restore Tool's original ApplLimit (stack is now Mac-like again)
; restore vectors               
                MOVE.L  (A7)+,PrivVec       ; restore original error trap handlers
                MOVE.L  (A7)+,TrapVVec
                MOVE.L  (A7)+,ChkVec
                MOVE.L  (A7)+,ZeroDivVec
; don't touch BusErr, AddrErr, and Illegal !

                MOVE.L  (A7)+,Trap15Vec     ; restore original TRAPx handlers
                MOVE.L  (A7)+,Trap14Vec
                MOVE.L  (A7)+,Trap13Vec
                MOVE.L  (A7)+,Trap12Vec
                MOVE.L  (A7)+,Trap11Vec
                MOVE.L  (A7)+,Trap10Vec
                MOVE.L  (A7)+,Trap9Vec
                MOVE.L  (A7)+,Trap8Vec
                MOVE.L  (A7)+,Trap7Vec
                MOVE.L  (A7)+,Trap6Vec
                MOVE.L  (A7)+,Trap5Vec
                MOVE.L  (A7)+,Trap4Vec
                MOVE.L  (A7)+,Trap3Vec
                MOVE.L  (A7)+,Trap2Vec
                MOVE.L  (A7)+,Trap1Vec
                MOVE.L  (A7)+,Trap0Vec
                
                MOVE.L  (A7)+,ApplScratch+8 ; restore ApplScratch, too (I don't know whether this is necessary)
; save FPU context if required
                BTST    #FLAGBIT$FPU,RP$FLAGSL(A6) ; do we need to transfer FPU context, too?
                BEQ.S   OGO2                ; ..no
                FMOVEM  FP0-FP7,RP$FP0(A6)  ; save FPU data registers
                FMOVEM  FPCR/FPSR/FPIAR,RP$FPCR(A6) ; save FPU control registers
OGO2            ADDQ.W  #2,A7               ; skip dummy SR save                
; now get back SR. If process had IRQs disabled, they'll be re-enabled now
                BTST    #FLAGBIT$IRQ,RP$FLAGSL(A6)  ; do we allow IRQs during this process?
                BNE.S   OGO5                        ; ..yes --> SR is already restored
                MOVE.W  (A7)+,SR                    ; get back SR
                BRA.S   OGO6
OGO5            ADDQ.W  #2,A7                       ; don't modify SR any more
OGO6
; we're back where we came from: Mac context
                MOVEM.L (A7)+,D1-D7/A0-A6   ; get back the Mac registers
                RTS                         ; back to C level
; end of os9_go()

                

;=====================================================================
;   ulong PPC_DISPATCH(ulong selector, ...); 
;
;   Input :     (A7).L    = return address
;               (4,A7).L  = selector
;               (8++,A7).L  = other routine parameters
;               
;   Output :    prepare flags required for FLUSHCACHE, FPU context save
;               and VM page hold
;=====================================================================

SEL_OS9GO        EQU 0
SEL_CACHERF      EQU 1
SEL_OS9DEBUG     EQU 2
SEL_UMPROBE      EQU 3

PPC_DISPATCH
;               _Debugger           ; %%% enable to debug calling interface problems etc.
                MOVE.L  4(A7),D0    ; get selector
; dispatch
                CMPI.W  #SEL_OS9GO,D0
                BEQ     OS9_GO
                CMPI.W  #SEL_CACHERF,D0
                BEQ     OS9_CACHE_RF
                CMPI.W  #SEL_OS9DEBUG,D0
                BEQ     OS9_DEBUG
                CMPI.W  #SEL_UMPROBE,D0
                BEQ     OS9_UMPROBE
; if none, simply return
                RTS
                
                
                ENDMAIN
            
                END

; * eof *
