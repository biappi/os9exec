 nam Systs ttl OS-9/68000 Initial (startup) module********************************* Editon History*  #    Date      Comments                                      by* -- --------- ------------------------------------------------ ---* 00 83/12/01 Initial test version developed.                   rfd* 00 84/01/20 Added code to process startup file.               rfd* 01 84/10/24 Removed chd to root device. (done by cold.a)      rfd *             Made non-reentrant.                               rfd* 02 85/11/13 Changed startup file to be redirected shell input.rfd* 03 85/11/13 Modified to chain to tsmon.			rfd* 04 08/28/87 Added F$STime call to set system clock            weo* 05 08-28-87 Adapted to Atari ST                               weo* -------- <<< Implementation Version V1.00 Release >>> ------- weo* -------- <<< Implementation Version V1.10 Release >>> ------- weo* 06  11/03/88 OEM_Glob now defined in sys.l                    weo* -------- <<< Implementation Version V1.20 Release >>> ------- weo* 07  12/03/88 Changed signon message                           weoEdition equ 7 current edition numberTyp_Lang set (Prgrm<<8)+ObjctAttr_Rev set 0 (non-reentrant) psect test,Typ_Lang,Attr_Rev,Edition,0,Entry use defsfile vsect ds.b 255 stack space endsPriority equ 128 initial priorityIntercpt OS9 F$RTE return from interceptEntry lea Intercpt(pc),a0 OS9 F$Icpt moveq.l #0,d0 moveq.l #0,d1 OS9 F$STime set system clock (read from RTC) lea CmdStr(pc),a0 default execution directory ptr moveq #Exec_,d0 execution mode OS9 I$ChgDir change execution directory (ignore errors) bcc.s Entry10 continue if no error lea ChdErrMs(pc),a0 "Help, I can't find CMDS" bsr ErrorMsg print error message* redirect std input to startup fileEntry10* Cumana/recc-O-ware specific addition use strecco.a  moveq #0,d0 std input path OS9 I$Dup clone it move.w d0,d7 save cloned path number moveq #0,d0 std input path OS9 I$Close move.w #Read_,d0 lea Startup(pcr),a0 "startup" pathlist OS9 I$Open open startup file bcc.s Entry15 continue if no error lea StarErMs(pc),a0 "Help, I can't find 'startup'" bsr.s ErrorMsg display error message bra.s Entry25* process startup fileEntry15 moveq #0,d0 any type module moveq #0,d1 no additional default memory size moveq #StartPSz,d2 size of startup shell params moveq #3,d3 copy three std I/O paths move.w #Priority,d4 medium priority lea ShellStr(pcr),a0 shell name lea StartPrm(pcr),a1 initial parameters OS9 F$Fork fork shell bcc.s Entry20 continue if no error lea FrkErrMs(pc),a0 "oh dear, can't fork shell" bsr ErrorMsg print error message OS9 F$SysDbg crash systemEntry20 OS9 F$Wait wait for it to die, ignore any error moveq #0,d0 std input path OS9 I$Close close redirected "startup"Entry25 move.w d7,d0 OS9 I$Dup restore original std input move.w d7,d0 OS9 I$Close remove cloned path* Chain to tsmon moveq #0,d0 any type module moveq #0,d1 default memory size (no override) moveq #TermStSz,d2 tsmon parameter size moveq #3,d3 copy std I/O paths move.w #Priority,d4 medium priority lea TsmonStr(pcr),a0 shell name lea TermStr(pcr),a1 null paramter string OS9 F$Chain enter tsmonErrorMsg moveq #0,d0 no error message file OS9 F$PErr print error number moveq #2,d0 std error path moveq #80,d1 default msg length OS9 I$WritLn output error message rtsFrkErrMs dc.b "Sysgo can't fork to "ShellStr dc.b "Shell",C$CRFrkErrSz equ *-FrkErrMsChdErrMs dc.b "Sysgo can't chx to "CmdStr dc.b "CMDS",C$CRChdErrSz equ *-ChdErrMsStarErMs dc.b "Sysgo can't open "Startup dc.b "startup",C$CRStarErSz equ *-StarErMsStartPrm dc.b "-npxt"CRChar dc.b C$CRStartPSz equ *-StartPrmTsmonStr dc.b "tsmon",0TermStr dc.b "/term",C$CRTermStSz equ *-TermStr ends