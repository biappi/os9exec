 opt -l nam System Service Call Definitions********************************* Edition History*  #   Date    Changes Made													by* -- -------- ------------------------------------------------------------- ---* 00 04-11-83 Converted to 68000 from OS-9 Level II Edition 7.				rfd* 00 05-24-83 Removed DAT routines with conditional assembly.				rfd* 00 06-21-83 Changed from "ds" to "do" (define offset).					rfd* 01 02-09-84 converted for linkage use.									lac* 02 09-23-84 Added F$SetSys service code.									rfd* 02 10-29-84 Added I$SGetSt service request for SS_DevNm.					rfd* 03 11-06-84 Added ISizBit as a create parameter.							rfd* 04 11-09-85 Revised physical division of modules.							rfd* 05 01-11-85 Added event queue system call.								rfd* 06 02-25-85 Fixed bad definition for "ISize_".							rfd* 07 04-09-85 Changed names of Find64 (etc) to protect innocent.			rfd* 08 05-30-85 Moved E$DNE, added E$HangUp (6809 compatability).				rfd* 09 06-24-85 Added E$Format.												rfd* 10 07-05-85 Added SS_DCOn, SS_DCOff, SS_EnRTS, SS_DsRTS					res*				---- OS-9/68k V1.2 released ----* 11 09-16-85 Added E$Damage.												rfd* 12 04-08-86 Added new status codes for tape drives.						rfd* 13 09-11-86 Added FPU E$'s, adjusted following errors down(!).			rfd* 14 09-16-86 Added trap error codes (from 'traps.a').						rfd* 15 10-01-86 Added SS_Open and SS_Close (for system use only).				rfd*             Added E$PthLost												rfd* 16 10-13-86 Merged "traps.a" into this file.								rfd*				---- OS-9/68k V2.0 released ----* 17 01-15-87 Added F$Gregor, SS$Sound.										rfd* 18 03-16-87 Added F$SysID, F$Alarm, F$SigMask.							rfd* 19 04-08-87 Added UCM status codes.										rfd* 20 05-05-87 Added SPU and UsrAct function requests.						rfd* 21 05-19-87 Added E$BadPart.												rfd* 22 05-27-87 Added F$CCtl.													rfd*				---- OS-9/68k V2.1 released ----* 23 08-18-87 Added "socket" status codes.									rfd* 24 09-15-87 Added alarm function codes.									rfd* 25 10-27-87 Added S$HangUp and E$Hardware.								rfd*				---- OS-9/68k V2.2 released ----* 26 01-25-88 Added F$GSPUMp to return SPU map for a process.				rfd* 27 04-12-88 Added F$SRqCMem request (colored memory).						rfd* 28 07-07-88 Added CDI error codes (starting at $600)						tje* 29 08-11-88 Added F$Panic call.											rfd* 30 09-07-88 Added CDI status definitions.									rfd*				---- CD-RTOS V0.97 released ----*				---- CD-RTOS V0.99 released ----* 31 11-02-88 Added SS_CChan.												rfd* 32 12-01-88 Added F$MBuf for Kim.											rfd* 33 01-09-89 Added SS_Install and SS_PCmd codes.							rfd* 34 01-18-89 Added SM_Loop and E$QFull (GFM audio) definitions.			tje*				---- OS-9/68k V2.2 edition #50 released ----* 35 02-16-89 Added F$Trans.												rfd* 36 03-02-89 Changed Ev$Incr to Ev$Set$ (as per documentation).			rfd*				---- OS-9/68k V2.3 released ----* 37 89/05/16 Added SS_VarSect.												lac* 38 89/07/18 Added SS_FG and its subfunctions for frame grabbers.			jejedition set 38 current edition number psect oskfuncs,0,0,edition,0,0 pag********************************* System Service Request Code Definitions			org 0F$Link:		do.b 1 Link to ModuleF$Load:		do.b 1 Load Module from FileF$UnLink:	do.b 1 Unlink ModuleF$Fork:		do.b 1 Start New ProcessF$Wait:		do.b 1 Wait for Child Process to DieF$Chain:	do.b 1 Chain Process to New ModuleF$Exit:		do.b 1 Terminate ProcessF$Mem:		do.b 1 Set Memory SizeF$Send:		do.b 1 Send Signal to ProcessF$Icpt:		do.b 1 Set Signal InterceptF$Sleep:	do.b 1 Suspend ProcessF$SSpd:		do.b 1 Suspend ProcessF$ID:		do.b 1 Return Process IDF$SPrior:	do.b 1 Set Process PriorityF$STrap:	do.b 1 Set Trap InterceptF$PErr:		do.b 1 Print ErrorF$PrsNam:	do.b 1 Parse Pathlist NameF$CmpNam:	do.b 1 Compare Two NamesF$SchBit:	do.b 1 Search Bit MapF$AllBit:	do.b 1 Allocate in Bit MapF$DelBit:	do.b 1 Deallocate in Bit MapF$Time:		do.b 1 Get Current TimeF$STime:	do.b 1 Set Current TimeF$CRC:		do.b 1 Generate CRCF$GPrDsc:	do.b 1 get Process Descriptor copyF$GBlkMp:	do.b 1 get System Block Map copyF$GModDr:	do.b 1 get Module Directory copyF$CpyMem:	do.b 1 Copy External MemoryF$SUser:	do.b 1 Set User ID numberF$UnLoad:	do.b 1 Unlink Module by nameF$RTE:		do.b 1 Return from Intercept routineF$GPrDBT:	do.b 1 Get system global data copyF$Julian:	do.b 1 Convert gregorian to Julian dateF$TLink:	do.b 1 Link trap subroutine packageF$DFork:	do.b 1 Debugging Fork callF$DExec:	do.b 1 Debugging execution call (single step)F$DExit:	do.b 1 Debugging exit call (kill child)F$DatMod:	do.b 1 Create data moduleF$SetCRC:	do.b 1 Generate valid header and CRC in moduleF$SetSys:	do.b 1 Set/examine system global variableF$SRqMem:	do.b 1 System Memory RequestF$SRtMem:	do.b 1 System Memory ReturnF$IRQ:		do.b 1 Enter IRQ Polling TableF$IOQu:		do.b 1 Enter I/O QueueF$AProc:	do.b 1 Enter Active Process QueueF$NProc:	do.b 1 Start Next ProcessF$VModul:	do.b 1 Validate ModuleF$FindPD:	do.b 1 Find Process/Path DescriptorF$AllPD:	do.b 1 Allocate Process/Path DescriptorF$RetPD:	do.b 1 Return Process/Path DescriptorF$SSvc:		do.b 1 Service Request Table InitializationF$IODel:	do.b 1 Delete I/O Module			do.b 1 (old F$SLink) System Link			do.b 1 reserved (6809 F$Boot  -Bootstrap System)			do.b 1 reserved (6809 F$BtMem -Bootstrap Memory Request)F$GProcP:	do.b 1 Get Process ptrF$Move:		do.b 1 Move DataF$AllRAM:	do.b 1 Allocate RAM blocks* semi-obsolete DAT requestsF$Permit:	do.b 1 (old F$AllImg) Allocate Image RAM blocksF$Protect:	do.b 1 (old F$DelImg) Deallocate Image RAM blocksF$SetImg	do.b 1 Set Process DAT ImageF$FreeLB	do.b 1 Get Free Low BlockF$FreeHB	do.b 1 Get Free High BlockF$AllTsk:	do.b 1 Allocate Process Task numberF$DelTsk:	do.b 1 Deallocate Process Task numberF$SetTsk	do.b 1 Set Process Task DAT registersF$ResTsk	do.b 1 Reserve Task numberF$RelTsk	do.b 1 Release Task numberF$DATLog	do.b 1 Convert DAT Block/Offset to LogicalF$DATTmp	do.b 1 Make temporary DAT imageF$LDAXY		do.b 1 Load A [X,[Y]]F$LDAXYP	do.b 1 Load A [X+,[Y]]F$LDDDXY	do.b 1 Load D [D+X,[Y]]F$LDABX		do.b 1 Load A from 0,X in task BF$STABX		do.b 1 Store A at 0,X in task BF$AllPrc:	do.b 1 Allocate Process DescriptorF$DelPrc:	do.b 1 Deallocate Process DescriptorF$ELink		do.b 1 Link using Module Directory EntryF$FModul:	do.b 1 Find Module Directory EntryF$MapBlk	do.b 1 Map Specific BlockF$ClrBlk	do.b 1 Clear Specific BlockF$DelRAM	do.b 1 Deallocate RAM blocksF$SysDbg:	do.b 1 Invoke system level debuggerF$Event:	do.b 1 Create/Link to named eventF$Gregor:	do.b 1 Convert julian date to gregorian dateF$SysID:	do.b 1 return system identificationF$Alarm:	do.b 1 send alarm signalF$SigMask:	do.b 1 set signal maskF$ChkMem:	do.b 1 determine if user process may access memory areaF$UAcct:	do.b 1 inform user accounting of process statusF$CCtl:		do.b 1 cache controlF$GSPUMp:	do.b 1 get SPU map information for a processF$SRqCMem:	do.b 1 System Colored Memory RequestF$POSK:		do.b 1 exeucte svc requestF$Panic:	do.b 1 Panic warningF$MBuf:		do.b 1 Memory buffer managerF$Trans:	do.b 1 Translate memory address to/from external bus********************************* I/O Service Request Code Definitions			org $80I$Org:		equ . first I/O request codeI$Attach:	do.b 1 Attach I/O DeviceI$Detach:	do.b 1 Detach I/O DeviceI$Dup:		do.b 1 Duplicate PathI$Create:	do.b 1 Create New FileI$Open:		do.b 1 Open Existing FileI$MakDir:	do.b 1 Make Directory FileI$ChgDir:	do.b 1 Change Default DirectoryI$Delete:	do.b 1 Delete FileI$Seek:		do.b 1 Change Current PositionI$Read:		do.b 1 Read DataI$Write:	do.b 1 Write DataI$ReadLn:	do.b 1 Read Line of ASCII DataI$WritLn:	do.b 1 Write Line of ASCII DataI$GetStt:	do.b 1 Get Path StatusI$SetStt:	do.b 1 Set Path StatusI$Close:	do.b 1 Close Path			do.b 1 reserved			do.b 1 reservedI$SGetSt:	do.b 1 Getstat using system path numberI$Last:		equ . end of I/O function calls pag*********************************  Trap Function CodesT$Math:		equ 15 math handler trap code assignmentT$Math1:	equ 15 obsolete*T$Math2:	equ 14 obsolete			org 0T$LMul:		do.b 1 Long MultiplyT$UMul:		do.b 1 Unsigned MultiplyT$LDiv:		do.b 1 Long DivideT$LMod:		do.b 1 Long ModulusT$UDiv:		do.b 1 Unsigned DivideT$UMod:		do.b 1 Unsigned ModulusT$FAdd:		do.b 1 Floating AddT$FInc:		do.b 1 Floating IncrementT$FSub:		do.b 1 Floating SubrtactT$FDec:		do.b 1 Floating DecrementT$FMul:		do.b 1 Floating MultiplyT$FDiv:		do.b 1 Floating DivideT$FCmp:		do.b 1 Floating CompareT$FNeg:		do.b 1 Floating NegateT$DAdd:		do.b 1 Double AddT$DInc:		do.b 1 Double IncrementT$DSub:		do.b 1 Double SubrtactT$DDec:		do.b 1 Double DecrementT$DMul:		do.b 1 Double MultiplyT$DDiv:		do.b 1 Double DivideT$DCmp:		do.b 1 Double CompareT$DNeg:		do.b 1 Double NegateT$AtoN:		do.b 1 Ascii to NumericT$AtoL:		do.b 1 Ascii to LongT$AtoU:		do.b 1 Ascii to UnsignedT$AtoF:		do.b 1 Ascii to FloatT$AtoD:		do.b 1 Ascii to DoubleT$LtoA:		do.b 1 Long to AsciiT$UtoA:		do.b 1 Unsigned to AsciiT$FtoA:		do.b 1 Float to AsciiT$DtoA:		do.b 1 Double to AsciiT$LtoF:		do.b 1 Long to FloatT$LtoD:		do.b 1 Long to DoubleT$UtoF:		do.b 1 Unsigned to FloatT$UtoD:		do.b 1 Unsigned to DoubleT$FtoL:		do.b 1 Float to LongT$DtoL:		do.b 1 Double to LongT$FtoU:		do.b 1 Float to UnsignedT$DtoU:		do.b 1 Double to UnsignedT$FtoD:		do.b 1 Float to DoubleT$DtoF:		do.b 1 Double to FloatT$FTrn:		do.b 1 Truncate Float to IntegerT$DTrn:		do.b 1 Truncate Double to IntegerT$FInt:		do.b 1 Round Float to IntegerT$DInt:		do.b 1 Round Double to IntegerT$DNrm:		do.b 1 64-bit integer to Double* formerly Math2T$Sin:		do.b 1 Sine functionT$Cos:		do.b 1 Cosine functionT$Tan:		do.b 1 Tangent functionT$Asn:		do.b 1 Arc Sine functionT$Acs:		do.b 1 Arc Cosine functionT$Atn:		do.b 1 Arc Tangent functionT$Log:		do.b 1 Natural Logarithm function (base e)T$Log10:	do.b 1 Common Logarithm function (base 10)T$Sqrt:		do.b 1 Square root functionT$Exp:		do.b 1 Exponentiation functionT$Power:	do.b 1 Power function pag********************************* File Access Permissions and Mode values*  If bit is set, access is permitted.Read_:		equ %00000001Write_:		equ %00000010Exec_:		equ %00000100Updat_:		equ Read_+Write_PRead_:		equ %00001000PWrit_:		equ %00010000PExec_:		equ %00100000PUpdat_:	equ PRead_+PWrit_Append_:	equ %00010000 force writes to always append to eofISize_:		equ %00100000 (create Mode value only)Share_:		equ %01000000 non-Sharable file if setDir_:		equ %10000000 Directory file if set* File Open Mode Bit Numbers (correspond to above access modes)ReadBit:	equ 0WriteBit:	equ 1ExecBit:	equ 2AppndBit:	equ 4ISizBit:	equ 5ShareBit:	equ 6DirBit:		equ 7********************************* Signal Code Values			org 0S$Kill:		do.b 1 Non-Interceptable AbortS$Wake:		do.b 1 Wake-up Sleeping ProcessS$Abort:	do.b 1 Keyboard AbortS$Intrpt:	do.b 1 Keyboard InterruptS$HangUp:	do.b 1 modem hangup			do.b 27 reservedS$Deadly:	equ .	above signals may cause I/O operations to abort            do.b 224 reserved for Microware use********************************* Event Code Values for F$Event			org 0Ev$Link:	do.b 1 Link to event nameEv$UnLnk:	do.b 1 Unlink eventEv$Creat:	do.b 1 Create new eventEv$Delet:	do.b 1 Delete event (by name)Ev$Wait:	do.b 1 Wait for eventEv$WaitR:	do.b 1 Wait for Relative change in eventEv$Read:	do.b 1 Read current event value, no waitingEv$Info:	do.b 1 Return event informationEv$Signl:	do.b 1 Signal event occurranceEv$Pulse:	do.b 1 Pulse event with valueEv$Set:		do.b 1 Set event valueEv$SetR:	do.b 1 Increment event valueEv$Incr:	equ Ev$SetR (old name)********************************* F$Alarm function code values			org 0A$Delete:	do.b 1 delete alarm(s)A$Set:		do.b 1	set alarm after intervalA$Cycle:	do.b 1 set cycling alarmA$AtDate:	do.b 1 set alarm at absolute timeA$AtJul:	do.b 1 set alarm at absolute time (julian)********************************* F$Panic function code values* uncommon, often disasterous system event codes			org 1K$Idle:		do.b 1 last "official" process has exitedK$PFail:	do.b 1 power failure pag********************************* Status Codes for GetStat/PutStat			org 0SS_Opt:		do.b 1 read/write PD optionsSS_Ready:	do.b 1 check for device readySS_Size:	do.b 1 read/Write file sizeSS_Reset:	do.b 1 device restoreSS_WTrk:	do.b 1 device write trackSS_Pos:		do.b 1 get file current positionSS_EOF:		do.b 1 test for End of FileSS_Link:	do.b 1 link to Status routinesSS_ULink:	do.b 1 unlink Status routinesSS_Feed:	do.b 1 destructive forward skip (form feed)SS_Frz:		do.b 1 freeze DD_ informationSS_SPT:		do.b 1 set DD_TKS to given valueSS_SQD:		do.b 1 sequence down hard diskSS_DCmd:	do.b 1 send direct command to deviceSS_DevNm:	do.b 1 return device nameSS_FD:		do.b 1 return file descriptorSS_Ticks:	do.b 1 set lockout honor durationSS_Lock:	do.b 1 lock/release recordSS_DStat:	do.b 1 return display statusSS_Joy:		do.b 1 return joystick valueSS_BlkRd:	do.b 1 block readSS_BlkWr:	do.b 1 block writeSS_Reten:	do.b 1 retension cycleSS_WFM:		do.b 1 write file markSS_RFM:		do.b 1 read past file markSS_ELog:	do.b 1 read error logSS_SSig:	do.b 1 send signal on data readySS_Relea:	do.b 1 release deviceSS_Attr:	do.b 1 set file attributesSS_Break:	do.b 1 send break out serial deviceSS_RsBit:	do.b 1 reserve bitmap sector (for disk reorg)SS_RMS:		do.b 1 get/set Motorola RMS statusSS_FDInf:	do.b 1 get FD info for specified FD sectorSS_ACRTC:	do.b 1 get/set Hitachi ACRTC statusSS_IFC:		do.b 1 serial input flow controlSS_OFC:		do.b 1 serial output flow controlSS_EnRTS:	do.b 1 enable RTS (modem control)SS_DsRTS:	do.b 1 disable RTS (modem control)SS_DCOn:	do.b 1 send signal DCD TRUESS_DCOff:	do.b 1 send signal DCD FALSESS_Skip:	do.b 1 skip block(s)SS_Mode:	do.b 1 set RBF access modeSS_Open:	do.b 1 notification of new path openedSS_Close:	do.b 1 notification of path being closedSS_Path:	do.b 1 (CDFM) return pathlist for open pathSS_Play:	do.b 1 (CDFM) play (CDI) fileSS_HEADER:	do.b 1 (CDFM) return header of last sector readSS_Raw:		do.b 1 (CDFM) read raw sectorsSS_Seek:	do.b 1 (CDFM) issue physical seek commandSS_Abort:	do.b 1 (CDFM) abort asyncrounous operation in progressSS_CDDA:	do.b 1 (CDFM) play CD digital audioSS_Pause:	do.b 1 (CDFM) pause the disc driverSS_Eject:	do.b 1 (CDFM) open the drive doorSS_Mount:	do.b 1 (CDFM) mount disc by disc numberSS_Stop:	do.b 1 (CDFM) stop the disc driveSS_Cont:	do.b 1 (CDFM) start the disc after pauseSS_Disable:	do.b 1 (CDFM) disable hardware controlsSS_Enable:	do.b 1 (CDFM) enable hardware controlsSS_ReadToc:	do.b 1 (CDFM) read toc (on red discs)SS_SM:		do.b 1 (CDFM) soundmap control status codeSS_SD:		do.b 1 (CDFM) sound data manipulation status codeSS_SC:		do.b 1 (CDFM) sound control status codeSS_SEvent:	do.b 1 set event on data readySS_Sound:	do.b 1 produce audible soundSS_DSize:	do.b 1 get drive size (in sectors)SS_Net:		do.b 1 nfm wild card getstat/setstat, with sub codeSS_Rename:	do.b 1 rename fileSS_Free:	do.b 1 return free statisticsSS_VarSect: do.b 1 variable sector size query			do.b 7 reservedSS_UCM:		do.b 5 (UCM) reservedSS_DM:		do.b 1 (UCM) drawmap control status codeSS_GC:		do.b 1 (UCM) graphics cursor status codeSS_RG:		do.b 1 (UCM) region status codeSS_DP:		do.b 1 (UCM) drawing parameters status codeSS_DR:		do.b 1 (UCM) graphics drawing status codeSS_DC:		do.b 1 (UCM) display control status codeSS_CO:		do.b 1 (UCM) character output status codeSS_VIQ:		do.b 1 (UCM) video inquiry status codeSS_PT:		do.b 1 (UCM) pointer status codeSS_SLink:	do.b 1 (UCM) Link external subroutine module to UCMSS_KB:		do.b 1 (UCM) keyboard status code			do.b 16 (UCM) reservedSS_Bind:	do.b 1 bind a socket nameSS_Listen:	do.b 1 listen for connectionsSS_Connect:	do.b 1 initiate a connectionSS_Resv:	do.b 1 socket characteristics specificationSS_Accept:	do.b 1 accept socket connectionsSS_Recv:	do.b 1 receive dataSS_Send:	do.b 1 send dataSS_GNam:	do.b 1 get socket nameSS_SOpt:	do.b 1 set socket optionSS_GOpt:	do.b 1 get socket optionSS_Shut:	do.b 1 shutdown socket connectionSS_SendTo:	do.b 1 send to addressSS_RecvFr:	do.b 1 receive from addressSS_Install:	do.b 1 install upper level protocal (ulp) handler on ifman listSS_PCmd:	do.b 1 protocol direct command			do.b 17 reservedSS_SN:		do.b 1 (DSM) screen functionsSS_AR:		do.b 1 (DSM) action region functionsSS_MS:		do.b 1 (DSM) message functionsSS_AC:		do.b 1 (DSM) action cursor functionsSS_CDFD:	do.b 1 (CDFM) return file descriptor informationSS_CChan:	do.b 1 (CDFM) change channel requestSS_FG:		do.b 1 (GFM) frame grabber set/getstat functions ttl CD-I Status Sub-function codes pag org 0	SS_SM setstat functions (CDFM/GFM)SM_Creat:	do.b 1 Create soundmapSM_Out:		do.b 1 Output soundmapSM_Off:		do.b 1 Turn off Audio processorSM_Cncl:	do.b 1 Conceal Error in SoundmapSM_Close:	do.b 1 Close SoundmapSM_Loop:	do.b 1 Set loopback point in a soundmapSM_In:		do.b 1 Input soundmap org 0 SS_SM getstat functions (CDFM/GFM)SM_Info:	do.b 1 Get soundmap descriptorSM_Stat:	do.b 1 Get soundmap status org 0	SS_FG get/setstat functions (GFM)FG_Info:	do.b 1 Get frame grabber informationFG_Grab:	do.b 1 Grab one frame of videoFG_Gain:	do.b 1 Set frame grabber gainFG_Offset:	do.b 1 Set frame grabber offset voltage org 0 SS_SD status functions (CDFM)SD_MMix:	do.b 1 Mix Monaural to StereoSD_SMix:	do.b 1 Mix Stereo to MonauralSD_Loop:	do.b 1 Set Soundmap Loopback Points org 0 SS_SC status functions (CDFM)SC_Atten:	do.b 1 Set Attenuation org 0 SS_DM status functions (UCM)DM_Creat:	do.b 1 Create DrawmapDM_Org:		do.b 1 Set Drawmap OriginDM_Copy:	do.b 1 Copy Drawmap to DrawmapDM_Exch:	do.b 1 Exchange Data Between DrawmapsDM_TCpy:	do.b 1 Copy Drawmap to DrawmapDM_TExc:	do.b 1 Exchange Data Between DrawmapsDM_Write:	do.b 1 Write DrawmapDM_IrWr:	do.b 1 Irregular WriteDM_Read:	do.b 1 Read DrawmapDM_WrPix:	do.b 1 Write PixelDM_RdPix:	do.b 1 Read PixelDM_Cncl:	do.b 1 Conceal Error in DrawmapDM_Close:	do.b 1 Close DrawmapDM_DMDup:	do.b 1 Duplicate Drawmap Descriptor org 0 SS_GC status functions (UCM)GC_Pos:		do.b 1 Position Graphics CursorGC_Show:	do.b 1 Show Graphics CursorGC_Hide:	do.b 1 Hide Graphics CursorGC_Ptn:		do.b 1 Set Graphics Cursor PatternGC_Col:		do.b 1 Set Graphics Cursor ColorGC_Blnk:	do.b 1 Set Graphics Cursor Blink RateGC_Org:		do.b 1 Set Graphics Cursor Origin org 0 SS_RG status functions (UCM)RG_Creat:	do.b 1 Create RegionRG_Isect:	do.b 1 Region IntersectionRG_Union:	do.b 1 Region UnionRG_Diff:	do.b 1 Region DifferenceRG_XOR:		do.b 1 Region Exclusive OrRG_Move:	do.b 1 Move RegionRG_Del:		do.b 1 Dete Region org 0 SS_DP status functions (UCM)DP_Ptn:		do.b 1 Set Drawing PatternDP_PAln:	do.b 1 Set Pattern AlignmentDP_SCMM:	do.b 1 Set Character Code Mapping MethodDP_SCR:		do.b 1 Set Color RegisterDP_GFnt:	do.b 1 Get FontDP_AFnt:	do.b 1 Activate FontDP_DFnt:	do.b 1 Deactivate FontDP_RFnt:	do.b 1 Release FontDP_Clip:	do.b 1 Set Clipping RegionDP_PnSz:	do.b 1 Set Pen SizeDP_PStyl:	do.b 1 Set Pen StyleDP_TCol:	do.b 1 Set Transparent Color org 0 SS_DR status functions (UCM)DR_Dot:		do.b 1 Draw a DotDR_Line:	do.b 1 Draw a LineDR_PLin:	do.b 1 Draw a PolylineDR_CArc:	do.b 1 Draw a Circular ArcDR_EArc:	do.b 1 Draw an Elliptical ArcDR_Rect:	do.b 1 Draw a RectangleDR_ERect:	do.b 1 Draw a Rectangle w/ eliptical cornersDR_PGon:	do.b 1 Draw a PolygonDR_Circ:	do.b 1 Draw a CircleDR_CWdg:	do.b 1 Draw a Circular WedgeDR_Elps:	do.b 1 Draw an EllipseDR_EWdg:	do.b 1 Draw an Elliptical WedgeDR_DRgn:	do.b 1 Draw a RegionDR_BFil:	do.b 1 Fill a Bounded Area with a PatternDR_FFil:	do.b 1 Flood FillDR_Copy:	do.b 1 Copy Data Within a DrawmapDR_Text:	do.b 1 Output Graphics TextDR_JTxt:	do.b 1 Output Justified Graphics Text org 0 SS_DC status functions (UCM)DC_CrFCT:	do.b 1 Create Field Control TableDC_RdFCT:	do.b 1 Read Field Control TableDC_WrFCT:	do.b 1 Write Field Control TableDC_RdFI:	do.b 1 Read Field Control InstructionDC_WrFI:	do.b 1 Write Field Control InstructionDC_DlFCT:	do.b 1 Delete Field Control TableDC_CrLCT:	do.b 1 Create Line Control TableDC_RdLCT:	do.b 1 Read Line Control TableDC_WrLCT:	do.b 1 Write Line Control TableDC_RdLI:	do.b 1 Read Line Control Table InstructionDC_WrLI:	do.b 1 Write Line Control Table InstructionDC_DlLCT:	do.b 1 Del Line Control TableDC_FLnk:	do.b 1 Link LCT to FCTDC_LLnk:	do.b 1 Link LCT to LCTDC_Exec:	do.b 1 Execute Display Control ProgramDC_Intl:	do.b 1 InterlaceDC_NOP:		do.b 1 write NOP arrary to LCTDC_SSig:	do.b 1 send signal on video interruptDC_Relea:	do.b 1 release from signal requestDC_SetCmp:	do.b 1 Set compatibility bit in VSCDC_DsplSiz:	do.b 1 return display size and resolutionDC_GetClut:	do.b 1 get a clut valueDC_GetCluts:do.b 1 get clut valuesDC_SetClut:	do.b 1 set a clut valueDC_SetCluts:do.b 1 set clut valuesDC_MapDM:	do.b 1 map a drawmap to the screenDC_Off:		do.b 1 turn display offDC_PRdLCT:	do.b 1 physical read of the LCTDC_PWrLCT:	do.b 1 physical read of the LCT org 0 SS_VIQ status functions (UCM)VIQ_TxtL:	do.b 1 Calculate Text LengthVIQ_CPos:	do.b 1 Return Relative Character PositionsVIQ_JCPs:	do.b 1 Return Character Positions for Justified TextVIQ_FDta:	do.b 1 Return Font DataVIQ_GDta:	do.b 1 Return Glyph DataVIQ_PntR:	do.b 1 Test if Point is within RegionVIQ_RLoc:	do.b 1 Inquire Region LocationVIQ_RInfo:	do.b 1 Inquire Region InfoVIQ_DMInfo:	do.b 1 Return Drawmap Descriptor Address org 0 SS_CO status functions (UCM)CO_COD:		do.b 1 Set Character Output DrawmapCO_SCMM:	do.b 1 Set Character Code Mapping MethodCO_AFnt:	do.b 1 Activate FontCO_DFnt:	do.b 1 Deactivate Font org 0 SS_PT status functions (UCM)PT_Coord:	do.b 1 Obtain Pointer CoordinatesPT_SSig:	do.b 1 Send Signal on Pointer ChangePT_Relea:	do.b 1 Release DevicePT_Pos:		do.b 1 Position relative pointing devicesPT_Org:		do.b 1 Set Pointer Origin org 0 SS_KB status functions (UCM)KB_Rdy:		do.b 1 check keyboard readyKB_Read:	do.b 1 obtain keyboard statusKB_Rel:		do.b 1 release keyboard signalKB_Repeat:	do.b 1 set keyboard latency and repeat speedKB_SSig:	do.b 1 send signal on keyboard readyKB_Stat:	do.b 1 determine keyboard special-key status org 0 SS_SN status functions (DSM)SN_Open:	do.b 1 open screenSN_Close:	do.b 1 close screenSN_Raise:	do.b 1 raise screenSN_Lower:	do.b 1 lower screenSN_Act:		do.b 1 activate screenSN_DeAct:	do.b 1 deactivate screenSN_CPAct:	do.b 1 activate cursor process on screenSN_CPDeAct:	do.b 1 deactivate cursor process on screenSN_FLink:	do.b 1 link FCT to screenSN_ALink:	do.b 1 link action region to screenSN_CP:		do.b 1 run cursor processSN_Info:	do.b 1 return screen informationSN_GetAct:	do.b 1 return active screenSN_DMLink:	equ SN_FLink Link a drawmap to a screen org 0 SS_AR status functions (DSM)AR_Open:	do.b 1 Open Action RegionAR_ReDefine:do.b 1 Redefine Action RegionAR_Close:	do.b 1 Close Action RegionAR_CloseSub:do.b 1 Close Action Region Sub RegionsAR_Raise:	do.b 1 Raise Action RegionAR_Lower:	do.b 1 Lower Action RegionAR_Act:		do.b 1 Activate Action RegionAR_DeAct:	do.b 1 Deactivate Action RegionAR_Move:	do.b 1 Move Action RegionAR_Mask:	do.b 1 Mask Action RegionAR_UnGrab:	do.b 1 Ungrab MessagesAR_Grab:	do.b 1 Grab MessagesAR_Info:	do.b 1 Return Action Region InformationAR_Find:	do.b 1 Find the Action Region for a PointAR_RelXY:	do.b 1 Return Action Region Relative coords from screen coordsAR_AbsXY:	do.b 1 Return Absolute coords from relative coords org 0 SS_MS status functions (DSM)MS_Read:	do.b 1 Read Message QueueMS_Write:	do.b 1 Write to Message QueueMS_UnRead:	do.b 1 Unread a MessageMS_Ready:	do.b 1 Check Message QueueMS_Signal:	do.b 1 Setup for signal from Message QueueMS_Release:	do.b 1 Release Message Queue for Signal callMS_Flush:	do.b 1 Empty Message QueueMS_Journ:	do.b 1 Setup JournalingMS_Stat:	do.b 1 Get input device status org 0 SS_AC status functions (DSM)AC_Pos:		do.b 1 Position Graphics CursorAC_Act:		do.b 1 Show Graphics CursorAC_DeAct:	do.b 1 Hide Graphics CursorAC_Track:	do.b 1 Track Pointing Device with Graphics CursorAC_Ptn:		do.b 1 Set Graphics Cursor PatternAC_Col:		do.b 1 Set Graphics Cursor ColorAC_Blnk:	do.b 1 Set Graphics Cursor Blink RateAC_Org:		do.b 1 Set Pointer/Cursor Origin ttl System Error Codes pag********************************* Error Code Definitions* trap handler errors (usually)			org 64E$IllFnc:	do.b 1 Illegal Function CodeE$FmtErr:	do.b 1 Format ErrorE$NotNum:	do.b 1 Number not foundE$IllArg:	do.b 1 Illegal argument* hardware exception errors			org 102E$BusErr:	do.b 1 TRAP 2 bus errorE$AdrErr:	do.b 1 TRAP 3 address errorE$IllIns:	do.b 1 TRAP 4 illegal instructionE$ZerDiv:	do.b 1 TRAP 5 zero divideE$Chk:		do.b 1 TRAP 6 CHK instructionE$TrapV:	do.b 1 TRAP 7 TrapV instructionE$Violat:	do.b 1 TRAP 8 privelage violationE$Trace:	do.b 1 TRAP 9 Uninitialized TraceE$1010:		do.b 1 TRAP 10 Uninitialized 1010E$1111:		do.b 1 TRAP 11 Uninitialized 1111E$Resrvd:	do.b 12 TRAP 12-23 (Motorola reserved)			do.b 8 TRAP 24-31 spurious and auto interrupt vectors (reserved)			do.b 1 TRAP 32, OS9 call - user TRAP 0 (reserved)E$Trap:		do.b 15 TRAP 33-47 unitialized user TRAP 1-15 executedE$FPUnordC	do.b 1 TRAP 48 FPCP bra or set on unordered conditionE$FPInxact	do.b 1 TRAP 49 FPCP inexact resultE$FPDivZer	do.b 1 TRAP 50 FPCP divide by zeroE$FPUndrFl	do.b 1 TRAP 51 FPCP underflowE$FPOprErr	do.b 1 TRAP 52 FPCP operand errorE$FPOverFl	do.b 1 TRAP 53 FPCP overflowE$FPNotNum	do.b 1 TRAP 54 FPCP not a number			do.b 9 TRAP 55-63 (reserved)* other errorsE$Permit:	do.b 1 You must be super user to do thatE$Differ:	do.b 1 Arguments to F$ChkNam are differentE$StkOvf:	do.b 1 Stack overflow (pattern to F$ChkNam too complex)E$EvntID:	do.b 1 Invalid or Illegal event ID numberE$EvNF:		do.b 1 Event (name) not foundE$EvBusy:	do.b 1 The event is busy (and so can't be deleted)E$EvParm:	do.b 1 Impossible Event parameters suppliedE$Damage:	do.b 1 System data structure has been damaged.E$BadRev:	do.b 1 Incompatable revisionE$PthLost:	do.b 1 Path Lost (net node was down)E$BadPart:	do.b 1 Bad partition data or no active partitionE$Hardware:	do.b 1 Hardware is damagedE$SectSize: do.b 1 Invalid Sector Size			do.b 23 reservedE$PthFul:	do.b 1 Path Table fullE$BPNum:	do.b 1 Bad Path NumberE$Poll:		do.b 1 Polling Table FullE$BMode:	do.b 1 Bad ModeE$DevOvf:	do.b 1 Device Table OverflowE$BMID:		do.b 1 Bad Module IDE$DirFul:	do.b 1 Module Directory FullE$MemFul:	do.b 1 Process Memory FullE$UnkSvc:	do.b 1 Unknown Service CodeE$ModBsy:	do.b 1 Module BusyE$BPAddr:	do.b 1 Bad Page AddressE$EOF:		do.b 1 End of FileE$VctBsy:	do.b 1 IRQ Vector is already usedE$NES:		do.b 1 Non-Existing SegmentE$FNA:		do.b 1 File Not AccesibleE$BPNam:	do.b 1 Bad Path NameE$PNNF:		do.b 1 Path Name Not FoundE$SLF:		do.b 1 Segment List FullE$CEF:		do.b 1 Creating Existing FileE$IBA:		do.b 1 Illegal Block AddressE$HangUp:	do.b 1 communication line downE$MNF:		do.b 1 Module Not FoundE$NoClk:	do.b 1 system has no clock runningE$DelSP:	do.b 1 Deleting Stack Pointer memoryE$IPrcID:	do.b 1 Illegal Process IDE$Param:	do.b 1 Impossible parameter specifiedE$NoChld:	do.b 1 No ChildrenE$ITrap:	do.b 1 Invalid or unavailable Trap code in TLink callE$PrcAbt:	do.b 1 Process AbortedE$PrcFul:	do.b 1 Process Table FullE$IForkP:	do.b 1 Illegal Fork ParameterE$KwnMod:	do.b 1 Known ModuleE$BMCRC:	do.b 1 Bad Module CRCE$Signal:	do.b 1 signal error (formerly E$USigP - Unprocessed Signal Pending)E$NEMod:	do.b 1 Non Existing ModuleE$BNam:		do.b 1 Bad NameE$BMHP:		do.b 1 (bad module header parity)E$NoRAM:	do.b 1 No RAM AvailableE$DNE:		do.b 1 Directory not emptyE$NoTask:	do.b 1 No available Task numberE$Unit:		do.b 1 Illegal Unit (drive)E$Sect:		do.b 1 Bad SECTor numberE$WP:		do.b 1 Write ProtectE$CRC:		do.b 1 Bad Check SumE$Read:		do.b 1 Read ErrorE$Write:	do.b 1 Write ErrorE$NotRdy:	do.b 1 Device Not ReadyE$Seek:		do.b 1 Seek ErrorE$Full:		do.b 1 Media FullE$BTyp:		do.b 1 Bad Type (incompatable) mediaE$DevBsy:	do.b 1 Device BusyE$DIDC:		do.b 1 Disk ID ChangeE$Lock:		do.b 1 Record is busy (locked out)E$Share:	do.b 1 Non-sharable file busyE$DeadLk:	do.b 1 I/O Deadlock errorE$Format:	do.b 1 Device is format protected			org $600	CD-I error codesE$IllPrm:	do.b 1 Illegal parameterE$IdFull:	do.b 1 Identifier (ID) table fullE$BadSiz:	do.b 1 Bad size errorE$RgFull:	do.b 1 Region definition full (overflow)	(*Video*)E$UnID:		do.b 1 Unallocated identifer numberE$NullRg:	do.b 1 Null region							(*Video*)E$BadMod:	do.b 1 Bad drawmap/pattern mode				(*Video*)E$NoFont:	do.b 1 No active font						(*Video*)E$NoDM:		do.b 1 No drawmap							(*Video*)E$NoPlay:	do.b 1 No audio play in progress			(*CDAudio*)E$Abort:	do.b 1 Asynchronous operation aborted		(*CDFM*)E$QFull:	do.b 1 Audio queue is full					E$Busy:		do.b 1 Audio processor is busy ends opt l